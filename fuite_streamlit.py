# -*- coding: utf-8 -*-
"""Fuite Streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wk-z2VNmragC-u80pIi7tauM2W-X1He6
"""

# TP3 : Fuite de Donn√©es Massives avec Interface Web (Streamlit)
# Objectif : D√©tection d'anomalies (cybers√©curit√©) avec Machine Learning et interface interactive

# --- 1. Chargement des biblioth√®ques ---
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.ensemble import IsolationForest
from sklearn.svm import OneClassSVM
from sklearn.neighbors import LocalOutlierFactor

import tensorflow as tf
from tensorflow.keras import layers, models

from matplotlib.backends.backend_pdf import PdfPages

import streamlit as st
import time
import gdown

# --- 2. Chargement et pr√©traitement du Dataset ---
@st.cache_data
def load_data():
    url = "https://drive.google.com/uc?id=1n9K_27iuLb_Ljz69d3YMRe6R5HHzwpWD"
    output = "UNSW_NB15_training-set.csv"
    gdown.download(url, output, quiet=False)

    df = pd.read_csv(output)
    cols_to_drop = ['id', 'attack_cat', 'proto', 'service', 'state']
    df.drop(columns=cols_to_drop, inplace=True, errors='ignore')
    df['label'] = LabelEncoder().fit_transform(df['label'])
    return df


df = load_data()
X = df.drop('label', axis=1)
y = df['label']
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)

# --- 3. AutoEncoder ---
def build_autoencoder(input_dim):
    model = models.Sequential([
        layers.Input(shape=(input_dim,)),
        layers.Dense(32, activation='relu'),
        layers.Dense(16, activation='relu'),
        layers.Dense(32, activation='relu'),
        layers.Dense(input_dim, activation='linear')
    ])
    return model

input_dim = X_train.shape[1]
autoencoder = build_autoencoder(input_dim)
autoencoder.compile(optimizer='adam', loss='mse')
X_train_norm = X_train[y_train == 0]
autoencoder.fit(X_train_norm, X_train_norm, epochs=10, batch_size=256, validation_split=0.2, verbose=0)

# Calcul seuil
reconstructions = autoencoder.predict(X_test)
mse = np.mean(np.power(X_test - reconstructions, 2), axis=1)
threshold = np.percentile(mse, 95)

# --- 4. Interface Web Streamlit ---
st.title("üõ°Ô∏è D√©tection de Fuite de Donn√©es avec AutoEncoder")
st.write("Ce d√©monstrateur d√©tecte les anomalies dans des logs r√©seau √† l'aide d'un mod√®le d'autoencodeur.")

uploaded_file = st.file_uploader("Chargez un fichier de logs au format CSV", type="csv")

if uploaded_file is not None:
    logs = pd.read_csv(uploaded_file)
    logs_scaled = scaler.transform(logs)
    reconstructions = autoencoder.predict(logs_scaled)
    errors = np.mean(np.power(logs_scaled - reconstructions, 2), axis=1)
    anomalies = (errors > threshold).astype(int)
    logs['anomaly'] = anomalies
    logs['score'] = errors

    st.write("### R√©sultat de l'analyse")
    st.write(logs.head())

    st.metric("Anomalies d√©tect√©es", anomalies.sum())
    st.line_chart(errors)

    st.download_button("üì• T√©l√©charger r√©sultats", data=logs.to_csv(index=False), file_name="analyse_logs.csv")

# --- 5. Simulation de flux de logs en direct ---
st.write("## üîÑ Simulation de logs en streaming")
stream_btn = st.button("Lancer la simulation")

if stream_btn:
    sample_data = X_test[:100]
    for i, row in enumerate(sample_data):
        row = row.reshape(1, -1)
        rec = autoencoder.predict(row)
        err = np.mean(np.power(row - rec, 2))
        is_anomaly = err > threshold
        time.sleep(0.2)
        st.write(f"[{i}] Erreur: {err:.4f} - {'‚ö†Ô∏è Anomalie' if is_anomaly else '‚úÖ Normal'}")

# --- 6. Export PDF ---
with PdfPages("rapport_tp3_detection_fuite.pdf") as pdf:
    fig, ax = plt.subplots(figsize=(10,5))
    sns.histplot(mse, bins=50, kde=True, ax=ax)
    ax.axvline(threshold, color='red', linestyle='--', label='Seuil')
    ax.set_title("Distribution des erreurs de reconstruction")
    ax.set_xlabel("MSE")
    ax.legend()
    pdf.savefig(fig)
    plt.close()

    fig, ax = plt.subplots(figsize=(10, 2))
    ax.text(0.01, 0.5, f"Rapport TP3 - D√©tection d'anomalies\nSeuil AE : {threshold:.4f}", fontsize=12)
    ax.axis('off')
    pdf.savefig(fig)
    plt.close()

st.success("Rapport PDF g√©n√©r√© avec succ√®s (rapport_tp3_detection_fuite.pdf)")
